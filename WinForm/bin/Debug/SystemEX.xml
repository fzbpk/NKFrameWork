<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SystemEX</name>
    </assembly>
    <members>
        <member name="T:NK.ByteEX">
            <summary>
            byte数组帮助类
            </summary>
        </member>
        <member name="M:NK.ByteEX.ToBCD(System.Byte)">
            <summary>
            转为BCD
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.FromBCD(System.Byte)">
            <summary>  
            将BCD一字节数据转换到byte 十进制数据  
            </summary>  
            <param name="b" />字节
            <returns>返回转换后的BCD码</returns>  
        </member>
        <member name="M:NK.ByteEX.HiByte(System.Byte)">
            <summary>
            高4位
            </summary>
            <param name="b">字节</param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.LoByte(System.Byte)">
            <summary>
            低4位
            </summary>
            <param name="b">字节</param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.ToInt(System.Byte[])">
            <summary>
            数组转INT
            </summary>
            <param name="data">数组</param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.ToByte(System.Int32)">
            <summary>
            INT 转数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.ToShort(System.Byte[])">
            <summary>
            数组转Short
            </summary>
            <param name="data">数组</param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.ToByte(System.Int16)">
            <summary>
            Short转数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.ToLong(System.Byte[])">
            <summary>
            数组转long
            </summary>
            <param name="data">数组</param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.ToByte(System.Int64)">
            <summary>
            long转数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.Tofloat(System.Byte[])">
            <summary>
            数组转float
            </summary>
            <param name="data">数组</param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.ToByte(System.Single)">
            <summary>
            float转数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.ToDouble(System.Byte[])">
            <summary>
            数组转double
            </summary>
            <param name="data">数组</param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.ToByte(System.Double)">
            <summary>
            double转数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.IsNullOrEmpty(System.Byte[])">
            <summary>
            数组是否为NULL或空
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.BZero(System.Byte[])">
            <summary>
            数组清零
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.CopyTo(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            数组复制
            </summary>
            <param name="org">源数组</param>
            <param name="dest">目标数组</param>
            <param name="srcindex">源数组起始位置</param>
            <param name="destindex">目标数组起始位置</param>
            <param name="len">数据长度</param>
        </member>
        <member name="M:NK.ByteEX.IndexofArray(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            查找起始位置
            </summary>
            <param name="source">源数组</param>
            <param name="comparison">比对数组</param>
            <param name="sourceindex">起始搜索位置</param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.ContainArray(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            是否包含数组
            </summary>
            <param name="source">源数组</param>
            <param name="comparison">查找数组</param>
            <param name="sourceindex">查找起始位置</param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.Spilt(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            分隔数组
            </summary>
            <param name="source">源数组</param>
            <param name="comparison">分隔数组</param>
            <param name="sourceindex"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.Spilt(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            分隔数组
            </summary>
            <param name="source">源数组</param>
            <param name="comparison">包头</param>
            <param name="endcomparison">包尾</param>
            <param name="sourceindex">起始位置</param>
            <returns></returns>
        </member>
        <member name="M:NK.ByteEX.Flashback(System.Byte[])">
            <summary>
            倒叙
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:NK.ClassEX">
            <summary>
            扩展类
            </summary>
        </member>
        <member name="M:NK.ClassEX.New``1(``0,System.Boolean)">
            <summary>
            空时NEW
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.New``1(System.Collections.Generic.List{``0})">
            <summary>
            空时NEW
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.New``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            空时NEW
            </summary>
            <typeparam name="M">Key</typeparam>
            <typeparam name="N">Value</typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.IsNullable(System.Object)">
            <summary>
            对象类型是否可空
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.NullType(System.Object)">
            <summary>
            获取可空类型的原类型，如INT?返回INT
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.ToStringN(System.Object)">
            <summary>
            强转非空字符串
            </summary>
            <param name="obj">字符串</param>
            <returns>非空字符串</returns>
        </member>
        <member name="M:NK.ClassEX.IsNull(System.Object)">
            <summary>
            对象是否为空
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.IsNotNull(System.Object)">
            <summary>
            对象非空
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            是否NULL或空
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="List">列表</param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.IsNullOrEmpty``1(System.Collections.Generic.List{``0})">
            <summary>
            是否NULL或空
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="List">列表</param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.IsNullOrEmpty``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            是否NULL或空
            </summary>
            <typeparam name="M">Key</typeparam>
            <typeparam name="N">Value</typeparam>
            <param name="List">列表</param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.FoundIndex(System.Int32)">
            <summary>
            是否找到索引
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.Found``1(System.Collections.Generic.List{``0})">
            <summary>
            是否找到
            </summary>
            <param name="List">查询结果</param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.Found``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            是否找到
            </summary>
            <param name="List">查询结果</param>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.Found``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            是否找到
            </summary>
            <param name="List">查询结果</param>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.Found``1(``0)">
            <summary>
            是否找到
            </summary>
            <param name="entity">查询结果</param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.Found``2(System.Collections.Generic.Dictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
            是否找到
            </summary>
            <param name="Dict">字典</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.ToJSON(System.Data.DataTable)">
            <summary>
            DataTable转JSON
            </summary>
            <param name="DT">DataTable</param>
            <returns>JSON</returns>
        </member>
        <member name="M:NK.ClassEX.ToXML(System.Data.DataTable)">
            <summary>
            DataTable转XML
            </summary>
            <param name="DT">DataTable</param>
            <returns>XML</returns>
        </member>
        <member name="M:NK.ClassEX.ToJson``1(``0)">
            <summary>
             转换为JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.ToJson``1(System.Collections.Generic.List{``0})">
            <summary>
            转换为JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonObject"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassEX.FromJson``1(System.String)">
            <summary>
            JSON串转类
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="strJson">JSON串</param>
            <returns>类</returns>
        </member>
        <member name="M:NK.ClassEX.FromJsons``1(System.String)">
            <summary>
            JSON串转类
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="strJson">JSON串</param>
            <returns>类</returns>
        </member>
        <member name="M:NK.ClassEX.FromJsonDictionary(System.String)">
            <summary>
            JSON转Dictionary
            </summary>
            <param name="strJson"></param>
            <returns></returns>
        </member>
        <member name="T:NK.DateTimeEX">
            <summary>
            日期帮助类
            </summary>
        </member>
        <member name="T:NK.DateTimeEX.DateInterval">
            <summary>
            日期类型
            </summary>
        </member>
        <member name="F:NK.DateTimeEX.DateInterval.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="F:NK.DateTimeEX.DateInterval.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:NK.DateTimeEX.DateInterval.Weekday">
            <summary>
            星期
            </summary>
        </member>
        <member name="F:NK.DateTimeEX.DateInterval.Day">
            <summary>
            日
            </summary>
        </member>
        <member name="F:NK.DateTimeEX.DateInterval.Hour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:NK.DateTimeEX.DateInterval.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:NK.DateTimeEX.DateInterval.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="M:NK.DateTimeEX.DateDiff(System.DateTime,NK.DateTimeEX.DateInterval,System.DateTime)">
            <summary>
            时间比较
            </summary>
            <param name="date1"></param>
            <param name="interval"></param>
            <param name="date2"></param>
            <returns></returns>
        </member>
        <member name="M:NK.DateTimeEX.DateAdd(System.DateTime,NK.DateTimeEX.DateInterval,System.Int32)">
            <summary>
            添加日期
            </summary>
            <param name="date"></param>
            <param name="interval"></param>
            <param name="Time"></param>
            <returns></returns>
        </member>
        <member name="T:NK.EntityEX">
            <summary>
            实体扩展
            </summary>
        </member>
        <member name="M:NK.EntityEX.Name(System.Object)">
            <summary>
            获取实体名
            </summary>
            <param name="obj">实体</param>
            <returns>类名</returns>
        </member>
        <member name="M:NK.EntityEX.Name(System.Type)">
            <summary>
            获取实体名
            </summary>
            <param name="obj">实体</param>
            <returns>类名</returns>
        </member>
        <member name="M:NK.EntityEX.FullName(System.Object)">
            <summary>
            获取实体全名
            </summary>
            <param name="obj">实体</param>
            <returns>类全名</returns>
        </member>
        <member name="M:NK.EntityEX.FullName(System.Type)">
            <summary>
            获取实体全名
            </summary>
            <param name="obj">实体</param>
            <returns>类全名</returns>
        </member>
        <member name="M:NK.EntityEX.ToDescription(System.Object)">
            <summary>
            获取类型的描述
            </summary>
            <param name="obj">实体</param>
            <returns>返回对象描述</returns>
        </member>
        <member name="M:NK.EntityEX.ToDescription(System.Type)">
            <summary>
            获取类型的描述
            </summary>
            <param name="obj">实体</param>
            <returns>返回对象描述</returns>
        </member>
        <member name="M:NK.EntityEX.ToDisplayName(System.Object)">
            <summary>
            获取类型的显示名称
            </summary>
            <param name="obj">实体</param>
            <returns>返回对象描述</returns>
        </member>
        <member name="M:NK.EntityEX.ToDisplayName(System.Type)">
            <summary>
            获取类型的显示名称
            </summary>
            <param name="obj">实体</param>
            <returns>返回对象描述</returns>
        </member>
        <member name="M:NK.EntityEX.ToPropertys(System.Object)">
            <summary>
            获取所有属性
            </summary>
            <param name="obj">实体</param>
            <returns></returns>
        </member>
        <member name="M:NK.EntityEX.ToPropertys(System.Type)">
            <summary>
            获取所有属性
            </summary>
            <param name="obj">实体</param>
            <returns></returns>
        </member>
        <member name="M:NK.EntityEX.ToProperty(System.Object,System.String,System.Boolean)">
            <summary>
            获取属性
            </summary>
            <param name="obj">实体</param>
            <param name="filed">字段</param>
            <param name="Ignore">忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:NK.EntityEX.ToProperty(System.Type,System.String,System.Boolean)">
            <summary>
            获取属性
            </summary>
            <param name="obj">实体</param>
            <param name="filed">字段</param>
            <param name="Ignore">忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:NK.EntityEX.ToDictionary(System.Object)">
            <summary>
            列出类所有属性
            </summary>
            <param name="obj">实体</param>
            <returns>属性和值</returns>
        </member>
        <member name="M:NK.EntityEX.FromDictionary(System.Object,System.Collections.Generic.Dictionary{System.Reflection.PropertyInfo,System.Object})">
            <summary>
            实体赋值
            </summary>
            <param name="obj"></param>
            <param name="Value"></param>
        </member>
        <member name="T:NK.EntityProperty">
            <summary>
            实体属性扩展
            </summary>
        </member>
        <member name="M:NK.EntityProperty.ToName(System.Reflection.PropertyInfo)">
            <summary>
            获取实体属性名
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NK.EntityProperty.CanRead(System.Reflection.PropertyInfo)">
            <summary>
            字段是否可读
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NK.EntityProperty.CanWrite(System.Reflection.PropertyInfo)">
            <summary>
            字段是否可写
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NK.EntityProperty.ValueType(System.Reflection.PropertyInfo)">
            <summary>
            字段值类型
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NK.EntityProperty.ToDescripfiled(System.Reflection.PropertyInfo)">
            <summary>
            获取属性类型的描述
            </summary>
            <param name="property">属性字段</param>
            <returns>返回对象描述，没有字段属性则显示属性名</returns>
        </member>
        <member name="M:NK.EntityProperty.ToDisplayName(System.Reflection.PropertyInfo)">
            <summary>
            获取属性类型的显示名
            </summary>
            <param name="property">属性字段</param>
            <returns>返回属性类型的显示名，没有字段属性则显示属性名</returns>
        </member>
        <member name="T:NK.EnumEx">
            <summary>
            枚举类
            </summary>
        </member>
        <member name="M:NK.EnumEx.EnumToList(System.Object)">
            <summary>
            列出枚举及值
            </summary>
            <param name="em">枚举</param>
            <returns>名称和值</returns>
        </member>
        <member name="M:NK.EnumEx.EnumDescToList(System.Object)">
            <summary>
             列出枚举描述及值
            </summary>
            <param name="em">枚举</param>
            <returns>枚举描述及值</returns>
        </member>
        <member name="M:NK.EnumEx.EnumToList(System.Type)">
            <summary>
            列出枚举及值
            </summary>
            <param name="em">枚举</param>
            <returns>名称和值</returns>
        </member>
        <member name="M:NK.EnumEx.EnumDescToList(System.Type)">
            <summary>
             列出枚举描述及值
            </summary>
            <param name="em">枚举</param>
            <returns>枚举描述及值</returns>
        </member>
        <member name="M:NK.EnumEx.ToENum(System.String,System.Type)">
            <summary>
            转枚举
            </summary>
            <param name="obj"></param>
            <param name="enumtype"></param>
            <returns></returns>
        </member>
        <member name="M:NK.EnumEx.ToENum(System.Int32,System.Type)">
            <summary>
            转枚举
            </summary>
            <param name="obj"></param>
            <param name="enumtype"></param>
            <returns></returns>
        </member>
        <member name="M:NK.EnumEx.ToENum(System.Object,System.Type)">
            <summary>
            转枚举
            </summary>
            <param name="obj"></param>
            <param name="enumtype"></param>
            <returns></returns>
        </member>
        <member name="T:NK.MathEX">
            <summary>
            算术扩展类
            </summary>
        </member>
        <member name="M:NK.MathEX.Abs(System.Double)">
            <summary>
            绝对值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Abs(System.Single)">
            <summary>
            绝对值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Abs(System.Int32)">
            <summary>
            绝对值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Abs(System.Int64)">
            <summary>
            绝对值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Abs(System.Int16)">
            <summary>
            绝对值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Sin(System.Double)">
            <summary>
            正弦
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Asin(System.Double)">
            <summary>
            反正弦
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Cos(System.Double)">
            <summary>
            余弦
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Acos(System.Double)">
            <summary>
            反余弦
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.tan(System.Double)">
            <summary>
            正切
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Atan(System.Double)">
            <summary>
            反正切
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.pow(System.Double,System.Double)">
            <summary>
            次方
            </summary>
            <param name="val"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.log(System.Double,System.Double)">
            <summary>
            底
            </summary>
            <param name="val"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Avg(System.Collections.Generic.List{System.Int32})">
            <summary>
            平均值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Avg(System.Collections.Generic.List{System.Double})">
            <summary>
            平均值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Sum(System.Collections.Generic.List{System.Int32})">
            <summary>
            统计值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Sum(System.Collections.Generic.List{System.Double})">
            <summary>
            统计值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Max(System.Collections.Generic.List{System.Int32})">
            <summary>
            最大值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Max(System.Collections.Generic.List{System.Double})">
            <summary>
            最大值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Min(System.Collections.Generic.List{System.Int32})">
            <summary>
            最小值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Min(System.Collections.Generic.List{System.Double})">
            <summary>
            最小值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NK.MathEX.Cacl(System.String)">
            <summary>
            公式计算
            </summary>
            <param name="Formula">公式</param>
            <returns></returns>
        </member>
        <member name="T:NK.StringEX">
            <summary>
            字符串扩展
            </summary>
        </member>
        <member name="M:NK.StringEX.IsNullOrEmpty(System.String)">
            <summary>
            是否空字符串
            </summary>
            <param name="str">字符串</param>
            <returns>是否空字符串</returns>
        </member>
        <member name="M:NK.StringEX.IsNullOrWhiteSpace(System.String)">
            <summary>
            是否有空格
            </summary>
            <param name="str">字符串</param>
            <returns>是否有空格</returns>
        </member>
        <member name="M:NK.StringEX.IsIPAdder(System.String)">
            <summary>
            是否IP
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsDate(System.String)">
            <summary>
            是否DateTime
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsByte(System.String)">
            <summary>
            是否byte
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsShort(System.String)">
            <summary>
            是否SHORT
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsuShort(System.String)">
            <summary>
            是否uSHORT
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsInteger(System.String)">
            <summary>
            是否INT
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsuInt(System.String)">
            <summary>
            是否UINT
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsLong(System.String)">
            <summary>
            是否long
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsuLong(System.String)">
            <summary>
            是否ulong
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.Isfloat(System.String)">
            <summary>
            是否float
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.Isdouble(System.String)">
            <summary>
            是否double
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsGuid(System.String)">
            <summary>
            是否Guid
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.ListNo(System.String)">
            <summary>
            获取流水号
            </summary>
            <param name="ListCap">字符串</param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.Token(System.String)">
            <summary>
            获取TOKEN
            </summary>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.ToInteger(System.String)">
            <summary>
            字符串转INT
            </summary>
            <param name="obj">字符串</param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.ToDouble(System.String)">
            <summary>
            字符串转double
            </summary>
            <param name="obj">字符串</param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.ToHex(System.Byte[],System.Boolean)">
            <summary>
            byte转十六进制字符串
            </summary>
            <param name="data">数据</param>
            <param name="SpaceSplit">是否空格分割</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:NK.StringEX.FromHex(System.String)">
            <summary>
            十六进制字符串转byte数组
            </summary>
            <param name="data">十六进制字符串</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:NK.StringEX.ToBase64(System.Byte[])">
            <summary>
            byte数组转Base64
            </summary>
            <param name="data">数据</param>
            <returns>Base64</returns>
        </member>
        <member name="M:NK.StringEX.FromBase64(System.String)">
            <summary>
             BASE64转byte数组
            </summary>
            <param name="data">BASE64</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:NK.StringEX.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转byte[]
            </summary>
            <param name="data">数据</param>
            <param name="Encode">字符串编码</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:NK.StringEX.FormBytes(System.Byte[],System.Text.Encoding)">
            <summary>
            byte数组转字符串
            </summary>
            <param name="data">byte数组</param>
            <param name="Encode">字符串编码</param>
            <returns>字符串</returns>
        </member>
        <member name="M:NK.StringEX.FromDateTime(System.String)">
            <summary>
            字符串转时间
            </summary>
            <param name="data">时间字符串</param>
            <returns>时间</returns>
        </member>
        <member name="M:NK.StringEX.ToDateTime(System.DateTime,System.String)">
            <summary>
            转换为时间字符串
            </summary>
            <param name="data">时间</param>
            <param name="Format">字符串格式</param>
            <returns>标准时间字符串</returns>
        </member>
        <member name="M:NK.StringEX.ToGuid(System.String)">
            <summary>
            字符串转GUID，空或非GUID字符串会重新生成
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.FromGuid(System.Guid)">
            <summary>
            字符串转GUID，空或非GUID字符串会重新生成
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.ToIPAddress(System.String)">
            <summary>
            字符串转IP
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.FromIPAddress(System.Net.IPAddress)">
            <summary>
            IP转字符串
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.ToUrlCode(System.String)">
            <summary>
            URLENCODE
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.FromUrlCode(System.String)">
            <summary>
            URLDECODE
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.ToHTML(System.String)">
            <summary>
            HTMLENCODE
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.FromHTML(System.String)">
            <summary>
            URLDECODE
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.MD5(System.String,System.String,System.Text.Encoding)">
            <summary>
            MD5
            </summary>
            <param name="str">明码</param>
            <param name="Key">秘钥</param>
            <param name="CharSet">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsMatch(System.String,System.String)">
            <summary>
            正则表达式
            </summary>
            <param name="str">字符串</param>
            <param name="pattern">表达式</param>
            <returns>是否符合</returns>
        </member>
        <member name="M:NK.StringEX.IsNumber(System.String)">
            <summary>
            是否输入数字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsLetter(System.String)">
            <summary>
            是否输入字母
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsLowLetter(System.String)">
            <summary>
            是否输入小写字母
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsUpLetter(System.String)">
            <summary>
            是否输入大写字母
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsLetterNum(System.String)">
            <summary>
            是否输入字母+数字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsGB2312(System.String)">
            <summary>
            是否汉字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsIP(System.String)">
            <summary>
            是否IP
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsURL(System.String)">
            <summary>
            是否网址
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsIdentificationCard(System.String)">
            <summary>
            是否身份证号
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsEMail(System.String)">
            <summary>
            是否电子邮箱
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsDomain(System.String)">
            <summary>
            是否域名
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsMobile(System.String)">
            <summary>
            是否域名
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NK.StringEX.IsPostCode(System.String)">
            <summary>
            是否域名
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:NK.ClassTransform.DATATABLE">
            <summary>
            DataTable  转换类
            </summary>
        </member>
        <member name="M:NK.ClassTransform.DATATABLE.ToEntity``1(System.Data.DataTable,System.Boolean)">
            <summary>
            DATATABLE转实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="DT">DATATABLE</param>
            <param name="NeedAttribute">是否需要通过数据属性标识转换，默认是</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:NK.ClassTransform.DATATABLE.FromEntity``1(System.Collections.Generic.IList{``0})">
            <summary>
            实体转DT
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="LS">实体列表</param>
            <returns>DATATABLE</returns>
        </member>
        <member name="M:NK.ClassTransform.DATATABLE.ToXML(System.Data.DataTable)">
            <summary>
            DataTable转XML
            </summary>
            <param name="DT">DATATABLE</param>
            <returns>XML</returns>
        </member>
        <member name="M:NK.ClassTransform.DATATABLE.ToJSON(System.Data.DataTable)">
            <summary>
            DataTable转JSON
            </summary>
            <param name="DT">DataTable</param>
            <returns>JSON</returns>
        </member>
        <member name="M:NK.ClassTransform.DATATABLE.Where(System.Data.DataTable,System.String)">
            <summary>
            查询
            </summary>
            <param name="dt"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassTransform.DATATABLE.Order(System.Data.DataTable,System.String)">
            <summary>
            排序
            </summary>
            <param name="dt"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:NK.ClassTransform.DATATABLE.Page(System.Data.DataTable,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            分页
            </summary>
            <param name="dt"></param> 
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <param name="PageCount"></param>
            <param name="RecordCount"></param>
            <returns></returns>
        </member>
        <member name="T:NK.ClassTransform.JSON">
            <summary>
            JSON转换类
            </summary>
        </member>
        <member name="M:NK.ClassTransform.JSON.ConvertJsonDateToDateString(System.Text.RegularExpressions.Match)">
            <summary>    
            将Json序列化的时间由/Date(1294499956278+0800)转为字符串    
            </summary>    
        </member>
        <member name="M:NK.ClassTransform.JSON.ConvertDateStringToJsonDate(System.Text.RegularExpressions.Match)">
            <summary>    
            将时间字符串转为Json时间    
            </summary>    
        </member>
        <member name="M:NK.ClassTransform.JSON.ToJson``1(``0)">
            <summary>
            类转JSON串
            </summary>
            <typeparam name="T">类</typeparam>
            <param name="t">类型</param>
            <returns>JSON串</returns>
        </member>
        <member name="M:NK.ClassTransform.JSON.ToJson``1(System.Collections.Generic.List{``0})">
            <summary>
            类转JSON串
            </summary>
            <typeparam name="T">类</typeparam>
            <param name="t">类型</param>
            <returns>JSON串</returns>
        </member>
        <member name="M:NK.ClassTransform.JSON.FromJson``1(System.String)">
            <summary>
            JSON串转类
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="strJson">JSON串</param>
            <returns>类</returns>
        </member>
        <member name="M:NK.ClassTransform.JSON.FromJsons``1(System.String)">
            <summary>
            JSON串转类
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="strJson">JSON串</param>
            <returns>类</returns>
        </member>
        <member name="M:NK.ClassTransform.JSON.JsonToDataSet(System.String)">
            <summary>
            JSON转DataSet
            </summary>
            <param name="Json">JSON串</param>
            <returns>DataSet</returns>
        </member>
        <member name="T:NK.ClassTransform.XML">
            <summary>
            XML转换类
            </summary>
        </member>
        <member name="M:NK.ClassTransform.XML.ToXML``1(``0)">
            <summary>
            实体转XML
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="t">实体</param>
            <returns>xml</returns>
        </member>
        <member name="M:NK.ClassTransform.XML.FromXML``1(System.String)">
            <summary>
            XML转实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="xml">xml</param>
            <returns>实体</returns>
        </member>
        <member name="M:NK.ClassTransform.XML.FromXML(System.String)">
            <summary>
            XML转DATASET
            </summary>
            <param name="xml">xml</param>
            <returns>DATASET</returns>
        </member>
        <member name="T:NK.Ajax">
            <summary>
            页面HTTP请求
            </summary>
        </member>
        <member name="M:NK.Ajax.ajax(System.String,System.String,System.String,System.Action{System.String},System.Action{System.Int32,System.String},System.String)">
            <summary>
            获取数据
            </summary>
            <param name="url">地址</param>
            <param name="data">数据</param>
            <param name="type">类型</param>
            <param name="Done">成功</param>
            <param name="Fail">失败</param>
            <param name="ContentType">连接类型</param>
        </member>
        <member name="M:NK.Ajax.Post(System.String,System.Byte[])">
            <summary>
            POST数据
            </summary>
            <param name="url"></param>
            <param name="postdata"></param>
            <returns></returns>
        </member>
        <member name="M:NK.Ajax.Post(System.String,System.String)">
            <summary>
            POST数据
            </summary>
            <param name="url"></param>
            <param name="postdata"></param>
            <returns></returns>
        </member>
        <member name="M:NK.Ajax.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            POST数据
            </summary>
            <param name="url"></param>
            <param name="postdata"></param>
            <returns></returns>
        </member>
        <member name="M:NK.Ajax.Get(System.String)">
            <summary>
            GET数据
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:NK.Ajax.GetString(System.String)">
            <summary>
            GET数据
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
    </members>
</doc>
